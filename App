{
  "name": "rest-express",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "npm run build:client && npm run build:server",
    "build:client": "vite build --outDir dist/client",
    "build:server": "tsc server/index.ts --outDir dist/server --target es2020 --module commonjs --esModuleInterop --skipLibCheck",
    "start": "node dist/server/index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@tanstack/react-query": "^5.59.16",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cors": "^2.8.5",
    "drizzle-orm": "^0.35.3",
    "express": "^4.21.1",
    "lucide-react": "^0.446.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.28.0",
    "recharts": "^2.12.7",
    "sqlite3": "^5.1.7",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.19.1",
    "vaul": "^1.0.0",
    "ws": "^8.18.0"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/node": "^22.7.5",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/sqlite3": "^3.1.11",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.26.2",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13",
    "typescript": "^5.6.3",
    "vite": "^5.4.8"
  }
}
import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';
import { db } from './db';
import { setupVite, serveStatic } from './vite';
import apiRoutes from './routes';

const app = express();
const server = createServer(app);

app.use(cors());
app.use(express.json());

// API routes
app.use('/api', apiRoutes);

// Setup Vite in development or serve static files in production
if (process.env.NODE_ENV === 'development') {
  setupVite(app, server);
} else {
  serveStatic(app);
}

// WebSocket server
const wss = new WebSocketServer({ server });

wss.on('connection', (ws) => {
  console.log('Client connected to WebSocket');
  
  ws.on('close', () => {
    console.log('Client disconnected from WebSocket');
  });
  
  // Send periodic updates
  const interval = setInterval(() => {
    if (ws.readyState === ws.OPEN) {
      ws.send(JSON.stringify({
        type: 'update',
        timestamp: new Date().toISOString(),
        data: {
          activeUsers: Math.floor(Math.random() * 1000) + 500,
          marketVolume: (Math.random() * 100).toFixed(2)
        }
      }));
    }
  }, 10000);
  
  ws.on('close', () => {
    clearInterval(interval);
  });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, '0.0.0.0', () => {
  const timestamp = new Date().toLocaleTimeString();
  console.log(`${timestamp} [express] serving on port ${PORT}`);
});
import express from 'express';
import { db } from './db';
import { getWalletData, updateWalletBalance } from './storage';

const router = express.Router();

// Wallet routes
router.get('/wallets/:id', async (req, res) => {
  try {
    const walletId = parseInt(req.params.id);
    const wallet = await getWalletData(walletId);
    res.json(wallet);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch wallet' });
  }
});

router.post('/wallets/:id/transaction', async (req, res) => {
  try {
    const walletId = parseInt(req.params.id);
    const { amount, type } = req.body;
    
    const wallet = await getWalletData(walletId);
    const newBalance = type === 'deposit' ? wallet.balance + amount : wallet.balance - amount;
    
    if (newBalance < 0) {
      return res.status(400).json({ error: 'Insufficient funds' });
    }
    
    await updateWalletBalance(walletId, newBalance);
    
    res.json({ 
      success: true, 
      newBalance,
      transaction: {
        id: Date.now(),
        amount,
        type,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    res.status(500).json({ error: 'Transaction failed' });
  }
});

// News route
router.get('/news', (req, res) => {
  const news = [
    {
      id: 1,
      title: "Law Enforcement Operation",
      content: "Major darknet marketplace taken down by international law enforcement",
      timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(),
      type: "security"
    },
    {
      id: 2,
      title: "New Privacy Coin Released",
      content: "Anonymous cryptocurrency with advanced privacy features launched",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),
      type: "crypto"
    },
    {
      id: 3,
      title: "Security Advisory",
      content: "Vulnerability discovered in popular encryption software",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 6).toISOString(),
      type: "security"
    }
  ];
  
  res.json(news);
});

// Marketplace routes
router.get('/marketplace', (req, res) => {
  const items = [
    {
      id: 1,
      title: "Premium VPN Access",
      category: "services",
      price: "0.025",
      currency: "BTC",
      seller: "SecureNet_Pro",
      rating: 4.8,
      description: "High-speed VPN with military-grade encryption"
    },
    {
      id: 2,
      title: "Cryptocurrency Mixer",
      category: "services",
      price: "0.015",
      currency: "BTC",
      seller: "CoinWash_Pro",
      rating: 4.6,
      description: "Professional coin mixing service for enhanced privacy"
    }
  ];
  
  res.json(items);
});

export default router;
import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const sqlite = new Database(':memory:');
export const db = drizzle(sqlite);

// Initialize database tables
sqlite.exec(`
  CREATE TABLE IF NOT EXISTS wallets (
    id INTEGER PRIMARY KEY,
    balance REAL DEFAULT 0,
    currency TEXT DEFAULT 'BTC'
  );
  
  INSERT OR IGNORE INTO wallets (id, balance, currency) VALUES (1, 2.5, 'BTC');
`);
import Database from 'better-sqlite3';

const db = new Database(':memory:');

// Initialize database
db.exec(`
  CREATE TABLE IF NOT EXISTS wallets (
    id INTEGER PRIMARY KEY,
    balance REAL DEFAULT 0,
    currency TEXT DEFAULT 'BTC',
    address TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );
  
  CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    wallet_id INTEGER,
    amount REAL,
    type TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (wallet_id) REFERENCES wallets(id)
  );
  
  CREATE TABLE IF NOT EXISTS investigation_results (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    target_id INTEGER,
    tool_used TEXT,
    findings TEXT,
    risk_assessment TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
  );
`);

// Seed initial data
const insertWallet = db.prepare(`
  INSERT OR REPLACE INTO wallets (id, balance, currency, address) 
  VALUES (?, ?, ?, ?)
`);

insertWallet.run(1, 2.5, 'BTC', 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh');
insertWallet.run(2, 150.75, 'ETH', '0x742d35Cc6524C0532925a3b8D373e7B6a5D0e9A7');
insertWallet.run(3, 5000.0, 'XMR', '4AdUndXHHZ6cfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRJ5DA7QHWAXjNZSfNrNyLNK7YYe8YqJm3F8YhJsVA');

export interface WalletData {
  id: number;
  balance: number;
  currency: string;
  address: string;
  created_at: string;
}

export async function getWalletData(walletId: number): Promise<WalletData> {
  const stmt = db.prepare('SELECT * FROM wallets WHERE id = ?');
  const wallet = stmt.get(walletId) as WalletData;
  
  if (!wallet) {
    throw new Error('Wallet not found');
  }
  
  return wallet;
}

export async function updateWalletBalance(walletId: number, newBalance: number): Promise<void> {
  const stmt = db.prepare('UPDATE wallets SET balance = ? WHERE id = ?');
  stmt.run(newBalance, walletId);
}

export async function addTransaction(walletId: number, amount: number, type: string): Promise<void> {
  const stmt = db.prepare('INSERT INTO transactions (wallet_id, amount, type) VALUES (?, ?, ?)');
  stmt.run(walletId, amount, type);
}

export async function getTransactionHistory(walletId: number): Promise<any[]> {
  const stmt = db.prepare('SELECT * FROM transactions WHERE wallet_id = ? ORDER BY timestamp DESC LIMIT 10');
  return stmt.all(walletId) as any[];
}

export async function saveInvestigationResult(result: any): Promise<void> {
  const stmt = db.prepare(`
    INSERT INTO investigation_results (target_id, tool_used, findings, risk_assessment) 
    VALUES (?, ?, ?, ?)
  `);
  stmt.run(result.targetId, result.toolUsed, JSON.stringify(result.findings), result.riskAssessment);
}

export async function getInvestigationResults(): Promise<any[]> {
  const stmt = db.prepare('SELECT * FROM investigation_results ORDER BY timestamp DESC LIMIT 20');
  const results = stmt.all() as any[];
  
  return results.map(result => ({
    ...result,
    findings: JSON.parse(result.findings)
  }));
}
import Database from 'better-sqlite3';

const db = new Database(':memory:');

// Initialize database
db.exec(`
  CREATE TABLE IF NOT EXISTS wallets (
    id INTEGER PRIMARY KEY,
    balance REAL DEFAULT 0,
    currency TEXT DEFAULT 'BTC',
    address TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );
  
  CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    wallet_id INTEGER,
    amount REAL,
    type TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (wallet_id) REFERENCES wallets(id)
  );
  
  CREATE TABLE IF NOT EXISTS investigation_results (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    target_id INTEGER,
    tool_used TEXT,
    findings TEXT,
    risk_assessment TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
  );
`);

// Seed initial data
const insertWallet = db.prepare(`
  INSERT OR REPLACE INTO wallets (id, balance, currency, address) 
  VALUES (?, ?, ?, ?)
`);

insertWallet.run(1, 2.5, 'BTC', 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh');
insertWallet.run(2, 150.75, 'ETH', '0x742d35Cc6524C0532925a3b8D373e7B6a5D0e9A7');
insertWallet.run(3, 5000.0, 'XMR', '4AdUndXHHZ6cfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRJ5DA7QHWAXjNZSfNrNyLNK7YYe8YqJm3F8YhJsVA');

export interface WalletData {
  id: number;
  balance: number;
  currency: string;
  address: string;
  created_at: string;
}

export async function getWalletData(walletId: number): Promise<WalletData> {
  const stmt = db.prepare('SELECT * FROM wallets WHERE id = ?');
  const wallet = stmt.get(walletId) as WalletData;
  
  if (!wallet) {
    throw new Error('Wallet not found');
  }
  
  return wallet;
}

export async function updateWalletBalance(walletId: number, newBalance: number): Promise<void> {
  const stmt = db.prepare('UPDATE wallets SET balance = ? WHERE id = ?');
  stmt.run(newBalance, walletId);
}

export async function addTransaction(walletId: number, amount: number, type: string): Promise<void> {
  const stmt = db.prepare('INSERT INTO transactions (wallet_id, amount, type) VALUES (?, ?, ?)');
  stmt.run(walletId, amount, type);
}

export async function getTransactionHistory(walletId: number): Promise<any[]> {
  const stmt = db.prepare('SELECT * FROM transactions WHERE wallet_id = ? ORDER BY timestamp DESC LIMIT 10');
  return stmt.all(walletId) as any[];
}

export async function saveInvestigationResult(result: any): Promise<void> {
  const stmt = db.prepare(`
    INSERT INTO investigation_results (target_id, tool_used, findings, risk_assessment) 
    VALUES (?, ?, ?, ?)
  `);
  stmt.run(result.targetId, result.toolUsed, JSON.stringify(result.findings), result.riskAssessment);
}

export async function getInvestigationResults(): Promise<any[]> {
  const stmt = db.prepare('SELECT * FROM investigation_results ORDER BY timestamp DESC LIMIT 20');
  const results = stmt.all() as any[];
  
  return results.map(result => ({
    ...result,
    findings: JSON.parse(result.findings)
  }));
}
import { ViteDevServer } from 'vite';
import express from 'express';
import { Server } from 'http';

export async function setupVite(app: express.Application, server: Server) {
  const { createServer } = await import('vite');
  
  const vite = await createServer({
    server: { middlewareMode: true },
    appType: 'spa',
    root: 'client'
  });
  
  app.use(vite.ssrFixStacktrace);
  app.use(vite.middlewares);
}

export function serveStatic(app: express.Application) {
  app.use(express.static('dist/client'));
  
  app.get('*', (req, res) => {
    res.sendFile('index.html', { root: 'dist/client' });
  });
}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ShadowBay - Darknet Simulator</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient()

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </React.StrictMode>,
)
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Layout from './components/Layout';
import Home from './pages/Home';
import Marketplace from './pages/Marketplace';
import HackingTools from './pages/HackingTools';
import CyberIntelligence from './pages/CyberIntelligence';
import Investigations from './pages/Investigations';
import Chat from './pages/Chat';
import Forums from './pages/Forums';
import Wallet from './pages/Wallet';
import Exchange from './pages/Exchange';
import Mining from './pages/Mining';
import Security from './pages/Security';
import Escrow from './pages/Escrow';
import UserGuide from './pages/UserGuide';
import NotFound from './pages/not-found';
import { Toaster } from './components/ui/toaster';

function App() {
  return (
    <Router>
      <Layout>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/marketplace" element={<Marketplace />} />
          <Route path="/hacking-tools" element={<HackingTools />} />
          <Route path="/cyber-intelligence" element={<CyberIntelligence />} />
          <Route path="/investigations" element={<Investigations />} />
          <Route path="/chat" element={<Chat />} />
          <Route path="/forums" element={<Forums />} />
          <Route path="/wallet" element={<Wallet />} />
          <Route path="/exchange" element={<Exchange />} />
          <Route path="/mining" element={<Mining />} />
          <Route path="/security" element={<Security />} />
          <Route path="/escrow" element={<Escrow />} />
          <Route path="/user-guide" element={<UserGuide />} />
          <Route path="*" element={<NotFound />} />
        </Routes>
        <Toaster />
      </Layout>
    </Router>
  );
}

export default App;
